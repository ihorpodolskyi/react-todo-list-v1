{"version":3,"sources":["reducers/tasks.js","components/todo-item.jsx","components/todo-list.jsx","App.js","index.js"],"names":["initialState","todos","TodoItem","props","deleteTask","id","onDeleteTask","saveTask","newInputValue","document","getElementById","value","trim","length","onSave","setState","isEditModeEnabled","currentItemId","alert","completedTask","todoStore","changedTask","forEach","item","isChecked","onToggleTask","state","enableEditMode","renderListLabel","className","type","defaultValue","taskName","ref","newTask","taskInput","React","createRef","this","key","onClick","Component","connect","dispatch","payload","task","TodoList","map","App","componentDidMount","timerID","setInterval","tick","componentWillUnmount","clearInterval","date","Date","addTask","current","onAddTask","toLocaleDateString","toLocaleTimeString","onSubmit","e","preventDefault","now","toString","isComplete","store","createStore","action","filter","applyMiddleware","logger","ReactDOM","render"],"mappings":"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","file":"static/js/main.0e7021bc.chunk.js","sourcesContent":["const initialState = {\n  todos: []\n};\n\nexport default function list(state = initialState, action) {\n  switch (action.type) {\n    case \"ADD_TASK\":\n      return {\n        todos: [...state.todos, action.payload]\n      };\n    case \"DELETE_TASK\":\n      return {\n        todos: state.todos.filter(item => item.id !== action.payload.id)\n      };\n    case \"SAVE_TASK\":\n      return {\n        todos: state.todos.map(item => {\n          if (item.id !== action.payload.id) {\n            return item;\n          } else {\n            return action.payload;\n          }\n        })\n      };\n    case \"TOGGLE_TASK\":\n      return {\n        todos: state.todos.map(item => {\n          if (item.id !== action.payload.id) {\n            return item;\n          } else {\n            return action.payload.task;\n          }\n        })\n      };\n    default:\n      return state;\n  }\n}","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"../App.css\";\n\nclass TodoItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isEditModeEnabled: false,\n      currentItemId: null\n    };\n    this.taskInput = React.createRef();\n    this.newTask = React.createRef();\n  }\n\n  deleteTask = id => {\n    this.props.onDeleteTask(id);\n  };\n\n  saveTask = id => {\n    let newInputValue = document.getElementById(id);\n    if (newInputValue.value.trim() && newInputValue.value.length) {\n      this.props.onSave(document.getElementById(id));\n      this.setState({\n        isEditModeEnabled: false,\n        currentItemId: id\n      });\n    } else {\n      alert(\"The field must not be empty :)\");\n    }\n  };\n\n  completedTask = id => {\n    const { todos } = this.props.todoStore;\n    let changedTask = {};\n\n    todos.forEach(item => {\n      if (item.id === id) {\n        changedTask = item;\n      }\n    });\n\n    changedTask.isChecked = !changedTask.isChecked;\n    this.props.onToggleTask(id, changedTask);\n\n    this.setState({\n      isChecked: !this.state.isChecked,\n      currentItemId: id\n    });\n  };\n\n  enableEditMode = id => {\n    this.setState({\n      isEditModeEnabled: !this.state.isEditModeEnabled,\n      currentItemId: id\n    });\n  };\n\n  renderListLabel = item => {\n    const { isEditModeEnabled, currentItemId } = this.state;\n    if (isEditModeEnabled && currentItemId === item.id) {\n      return (\n        <input\n          className=\"app__item-text\"\n          id={item.id}\n          type=\"text\"\n          defaultValue={item.taskName}\n          ref={this.newTask}\n        />\n      );\n    } else {\n      return (\n        <span\n          className={`app__task ${item.isChecked ? \"app__completed-task\" : \"\"}`}\n        >\n          {item.taskName}\n        </span>\n      );\n    }\n  };\n\n  render() {\n    const { item } = this.props;\n    const { isEditModeEnabled } = this.state;\n    const { currentItemId } = this.state;\n\n    return (\n      <li className=\"app__list-item\" key={item.id}>\n        <button\n          className=\"app__task-completed btn-group\"\n          onClick={() => this.completedTask(item.id)}\n        />\n\n        {this.renderListLabel(item)}\n\n        {isEditModeEnabled && currentItemId === item.id && (\n          <button\n            className=\"app__edited-task-save btn-group\"\n            onClick={() => this.saveTask(item.id)}\n          />\n        )}\n\n        {(!isEditModeEnabled || currentItemId !== item.id) && (\n          <button\n            className=\"app__edit-task btn-group\"\n            onClick={() => this.enableEditMode(item.id)}\n          />\n        )}\n\n        <button\n          className=\"app__remove-task btn-group\"\n          onClick={() => this.deleteTask(item.id)}\n        />\n      </li>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    todoStore: state\n  }),\n  dispatch => ({\n    onDeleteTask: id => {\n      dispatch({\n        type: \"DELETE_TASK\",\n        payload: {\n          id\n        }\n      });\n    },\n    onToggleTask: (id, task) => {\n      dispatch({\n        type: \"TOGGLE_TODO\",\n        payload: {\n          id,\n          task\n        }\n      });\n    },\n    onSave: newTask => {\n      dispatch({\n        type: \"SAVE_TASK\",\n        payload: {\n          taskName: newTask.value,\n          id: newTask.id\n        }\n      });\n    }\n  })\n)(TodoItem);","import React from \"react\";\nimport TodoItem from \"./todo-item\";\nimport { connect } from \"react-redux\";\nimport \"../App.css\";\n\nclass TodoList extends React.Component {\n  render() {\n    const { todos } = this.props.todoStore;\n\n    return (\n      <ul className=\"app__tasks-list\">\n        {todos.map(item => (\n          <TodoItem key={item.id} item={item} />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    todoStore: state\n  }),\n  dispatch => ({})\n)(TodoList);\n","import React from \"react\";\nimport TodoList from \"./components/todo-list\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { date: new Date() };\n    this.taskInput = React.createRef();\n  }\n\n  componentDidMount = () => {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  };\n\n  componentWillUnmount = () => {\n    clearInterval(this.timerID);\n  };\n\n  tick = () => {\n    this.setState({\n      date: new Date()\n    });\n  };\n\n  addTask = () => {\n    if (\n      this.taskInput.current.value.trim() &&\n      this.taskInput.current.value.length\n    ) {\n      this.props.onAddTask(this.taskInput.current.value);\n      this.taskInput.current.value = \"\";\n    } else {\n      alert(\"The field must not be empty :)\");\n    }\n  };\n\n  render() {\n    const { todos } = this.props.todoStore;\n\n    return (\n      <div className=\"app\">\n        <div className=\"app__time-date\">\n          <span className=\"app__date\">\n            {this.state.date.toLocaleDateString()}\n          </span>\n          <span className=\"app__time\">\n            {this.state.date.toLocaleTimeString()}\n          </span>\n        </div>\n        <div className=\"app__container\">\n          <form\n            className=\"app__form\"\n            onSubmit={e => {\n              e.preventDefault();\n            }}\n          >\n            <input\n              className=\"app__input-add\"\n              type=\"text\"\n              ref={this.taskInput}\n            />\n            <button className=\"app__btn-add\" onClick={() => this.addTask()}>\n              ADD TASK #{todos.length + 1}\n            </button>\n          </form>\n        </div>\n\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    todoStore: state\n  }),\n  dispatch => ({\n    onAddTask: taskName => {\n      dispatch({\n        type: \"ADD_TASK\",\n        payload: {\n          taskName,\n          id: Date.now().toString(),\n          isComplete: false\n        }\n      });\n    }\n  })\n)(App);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers/tasks\";\nimport logger from \"redux-logger\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst store = createStore(reducer, applyMiddleware(logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}